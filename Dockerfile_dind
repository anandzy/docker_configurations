# Use Docker-in-Docker base
FROM docker:24.0-dind

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/opt/kafka/bin:${PATH}"
ENV JAVA_HOME="/usr/lib/jvm/java-11-openjdk"

# Add Alpine community repo for additional packages
RUN echo "🛠️ Adding Alpine community repository..." \
 && echo "https://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories

# Core packages and CLI tools
RUN echo "📦 Installing core dependencies..." \
 && apk add --no-cache \
    bash curl wget unzip file rsync tree vim jq git openjdk11 netcat-openbsd bind-tools \
    nmap busybox-extras traceroute net-tools python3 python3-dev py3-pip ansible docker-cli \
    docker-openrc make zip openssh-client gcc g++ zlib-dev libffi-dev openssl-dev bzip2-dev \
    readline-dev sqlite-dev patch build-base musl-dev xz-dev tk-dev zsh shadow aws-cli flux \
    kustomize kubectl asciinema

# Zsh plugins
RUN echo "🔧 Installing Zsh plugins..." \
 && mkdir -p /root/.zsh/plugins \
 && git clone https://github.com/zsh-users/zsh-autosuggestions /root/.zsh/plugins/zsh-autosuggestions \
 && git clone https://github.com/zsh-users/zsh-syntax-highlighting /root/.zsh/plugins/zsh-syntax-highlighting

# Set default shell to zsh
RUN echo "💻 Setting default shell to Zsh..." \
 && chsh -s $(which zsh) root

# Powerline
RUN echo "⚡ Installing Powerline..." \
 && python3 -m venv /opt/powerline-venv \
 && /opt/powerline-venv/bin/pip install powerline-status

# k9s CLI
RUN echo "🔍 Installing k9s..." \
 && K9S_VERSION=$(curl -s https://api.github.com/repos/derailed/k9s/releases/latest | jq -r .tag_name) \
 && wget https://github.com/derailed/k9s/releases/download/${K9S_VERSION}/k9s_Linux_amd64.tar.gz \
 && tar -xzf k9s_Linux_amd64.tar.gz \
 && mv k9s /usr/local/bin/ \
 && chmod +x /usr/local/bin/k9s \
 && rm -rf k9s_Linux_amd64.tar.gz

# Terraform
RUN echo "🛠️ Installing Terraform..." \
 && wget https://releases.hashicorp.com/terraform/1.0.9/terraform_1.0.9_linux_amd64.zip \
 && unzip terraform_1.0.9_linux_amd64.zip \
 && mv terraform /usr/local/bin/ \
 && rm terraform_1.0.9_linux_amd64.zip

# AWS SAM CLI
RUN echo "☁️ Installing AWS SAM CLI..." \
 && pip3 install --break-system-packages aws-sam-cli

# Kafka CLI
RUN echo "📡 Installing Kafka CLI..." \
 && wget https://archive.apache.org/dist/kafka/3.7.0/kafka_2.13-3.7.0.tgz \
 && tar -xzf kafka_2.13-3.7.0.tgz \
 && mv kafka_2.13-3.7.0 /opt/kafka \
 && rm kafka_2.13-3.7.0.tgz

# # Pyenv
# RUN echo "🐍 Installing Pyenv..." \
#  && git clone https://github.com/pyenv/pyenv.git /root/.pyenv \
#  && echo 'export PYENV_ROOT="$HOME/.pyenv"' >> /root/.zshenv \
#  && echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /root/.zshenv \
#  && echo 'eval "$(pyenv init --path)"' >> /root/.zshenv

# # Install recent Python versions via pyenv (last 3)
# RUN echo "🐍 Installing Python versions..." \
#  && export PYENV_ROOT="/root/.pyenv" \
#  && export PATH="$PYENV_ROOT/bin:$PATH" \
#  && eval "$(pyenv init --path)" \
#  && CONFIGURE_OPTS='--enable-shared --enable-optimizations' \
#  && /bin/zsh -c 'pyenv install --list | grep -E "^\s*3\.[0-9]+\.[0-9]+$" | tail -n 3 | while read -r version; do \
#      echo "📌 Installing Python $version..."; \
#      if ! pyenv versions | grep -q "$version"; then pyenv install "$version"; fi; \
#   done; \
#   latest=$(pyenv versions --bare | tail -n 1); \
#   echo "Setting global Python version to $latest"; \
#   pyenv global "$latest"; \
#   pyenv rehash'

# Add .zshrc content directly
RUN echo "export TERM=xterm-256color" >> /root/.zshrc \
 && echo "autoload -Uz compinit && compinit" >> /root/.zshrc \
 && echo "source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" >> /root/.zshrc \
 && echo "source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> /root/.zshrc \
 && echo "export PATH=\"/opt/powerline-venv/bin:\$PATH\"" >> /root/.zshrc \
 && echo "POWERLEVEL9K_MODE=\"nerdfont-complete\"" >> /root/.zshrc \
 && echo "PROMPT=\"%F{cyan}%n@%m %F{yellow}%~%f $ \"" >> /root/.zshrc \
 && echo "alias k=\"kubectl\"" >> /root/.zshrc \
 && echo "alias d=\"docker\"" >> /root/.zshrc \
 && echo "alias c=\"clear\"" >> /root/.zshrc \
 && echo "alias e=\"exit\"" >> /root/.zshrc \
 && echo "alias t=\"terraform\"" >> /root/.zshrc \
 && echo "alias a=\"ansible\"" >> /root/.zshrc \
 && echo "alias h=\"helm\"" >> /root/.zshrc \
 && echo "alias f=\"flux\"" >> /root/.zshrc \
 && echo "alias kz=\"kustomize\"" >> /root/.zshrc \
 && echo "alias ll=\"ls -al --color=auto\"" >> /root/.zshrc \
 && echo "alias pyv=\"python --version\"" >> /root/.zshrc \
 && echo "alias pyev=\"pyenv versions\"" >> /root/.zshrc \
 && echo "# 👉 Kubernetes API helpers" >> /root/.zshrc \
 && echo "alias kapires=\"kubectl api-resources\"" >> /root/.zshrc \
 && echo "alias kapivers=\"kubectl api-versions\"" >> /root/.zshrc \
 && echo "alias kapischema=\"kubectl explain services\"" >> /root/.zshrc \
 && echo "alias kskel=\"kubectl create --dry-run=client -o yaml\"" >> /root/.zshrc \
 && echo "alias kskeljson=\"kubectl create configmap my-config --from-literal=env=prod --dry-run=client -o yaml\"" >> /root/.zshrc

# Source .zshrc in zshenv for all sessions
RUN echo "🔄 Ensuring .zshrc is sourced on startup..." \
 && echo "source ~/.zshrc" >> /root/.zshenv

# Set working directory
WORKDIR /root

# Set default user and shell
USER root
CMD ["zsh"]